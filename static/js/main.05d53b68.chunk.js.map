{"version":3,"sources":["utils/parser.js","utils/tronweb.js","components/PostVote.js","components/PostItem.js","components/DummyItem.js","components/Posts.js","components/CommentBox.js","components/CommentVote.js","components/CommentItem.js","components/CommentsList.js","components/Donate.js","components/PostPage.js","components/CreatePostForm.js","components/About.js","components/SiteHeader.js","components/SiteFooter.js","components/Search.js","components/Account.js","App.js","serviceWorker.js","index.js"],"names":["a2hex","str","arr","i","l","length","hex","Number","charCodeAt","toString","push","join","aTo32bytehex","arguments","undefined","hex2a","hexx","substr","String","fromCharCode","parseInt","Time2a","timestamp","Date","toLocaleDateString","Time2HMS","date","hours","getHours","minutes","getMinutes","seconds","getSeconds","TextType","content","type","includes","tronWeb","tronWebDefault","require","contractAddress","dynamicTronlink","tron","window","_callee","title","tags","contract","byteTitle","byteContent","byteTags","regenerator_default","a","wrap","_context","prev","next","Swal","at","sent","CreatePost","send","shouldPollResponse","callValue","then","res","catch","err","stop","this","getPosts","_getPosts","apply","_callee2","events","posts","TagList","address","tronaddress","post","_context2","getEventResult","substring","fromHex","postid","author","hms","concat","localStorage","setItem","JSON","stringify","abrupt","_callee3","commentText","parentComment","bytecommentText","id","_context3","PostComment","getComments","_getComments","_callee4","comments","comment","_context4","commentid","_callee5","votes","pid","upvotecall","up","downvotecall","down","postVote","_context5","parse","getItem","getUpVotes","call","toBigNumber","toNumber","getDownVotes","upvotes","downvotes","total","VoteOnPost","_x7","_x8","_VoteOnPost","_callee6","votetype","_context6","UpvotePost","DownvotePost","_callee7","CommentVotes","cid","comid","commentVote","_context7","getCommentUpVotes","getCommentDownVotes","VoteOnComment","_x9","_x10","_x11","_VoteOnComment","_callee8","_context8","UpvoteComment","DownvoteComment","_callee9","trxAmount","sunAmount","_context9","deposit","_callee10","takeAll","sunHexValue","_context10","withdraw","toHex","_callee11","_context11","makeDonation","_callee12","Donations","ContractPostDonation","Sun","Donation","_context12","getPostDonations","SunDonations","TrxDonation","_callee13","UsernameString","user","_context13","SetUsername","_callee14","senderAddress","hexAdd","add","ContractBalance","balance","ContractUsername","username","_context14","getSenderAddress","getBalance","getUsername","TronAddress","HexAddress","SunBalance","UserName","_callee15","unique","UserNames","NoUsername","nousernameascii","_context15","PostVote","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","handleUpvote","bind","assertThisInitialized","handleDownvote","event","preventDefault","upVoteCount","downVoteCount","upValue","downValue","react_default","createElement","class","onClick","Component","PostItem","Users","className","components_PostVote","Link","to","Divider_default","variant","Tooltip_default","leaveDelay","interactive","DummyItem","isPost","Posts","postItems","filter","filterword","match","tag","map","components_PostItem","key","components_DummyItem","CommentBox","modules","toolbar","header","list","indent","formats","state","handleChange","handleSubmit","value","setState","_x4","_x5","_x6","_createNewComment","createNewComment","onSubmit","lib_default","theme","onChange","React","CommentVote","CommentItem","components_CommentVote","dangerouslySetInnerHTML","__html","CommentsList","commentItems","filteredComments","components_CommentItem","Donate","TrxValue","target","_x15","_x16","_DonateTrx","DonateTrx","userData","donation","PostPage","donations","ExpansionPanel_default","expanded","ExpansionPanelSummary_default","Typography_default","ExpansionPanelDetails_default","align","defaultExpanded","components_Donate","components_CommentBox","components_CommentsList","CreatePostForm","handleTitleChange","handleTagChange","handleContentChange","_x","_x2","_x3","_createNewPost","createNewPost","maxLength","About","SiteHeader","data-toggle","data-target","aria-controls","aria-expanded","aria-label","SiteFooter","Search","search","handleSearchChange","components_Posts","Account","DepositValue","Username","handleDepositChange","handleDepositSubmit","handleWithdrawSubmit","handleUserChange","handleUserSubmit","_x12","_DepositTrx","DepositTrx","_x13","_x14","_withdrawTrx","withdrawTrx","WithdrawValue","_x17","_ChangeUsername","ChangeUsername","esm","App","postData","commentData","_getVoteCounters","getVoteCounters","_getCommentVoteCounters","getCommentVoteCounters","_getUserData","getUserData","_getDonations","getDonations","_getUsers","getUsers","HashRouter","components_SiteHeader","Route","path","component","newpost","exact","Home","AboutP","PostP","TagP","SearchP","AccountP","components_SiteFooter","components_CreatePostForm","_ref","components_PostPage","params","_ref2","term","_ref3","components_About","_ref4","components_Search","_ref5","components_Account","Boolean","location","hostname","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.05d53b68.chunk.js","sourcesContent":["//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\n//convert ascii text to hex\r\nexport function a2hex(str) {\r\n    var arr = [];\r\n    for (var i = 0, l = str.length; i < l; i ++) {\r\n      var hex = Number(str.charCodeAt(i)).toString(16);\r\n      arr.push(hex);\r\n    }\r\n    return \"0x\" + arr.join('');\r\n}\r\n\r\n//convert ascii text to 32byte\r\nexport function aTo32bytehex(str, length=32) {\r\n    var arr = [];\r\n    for (var i = 0, l = str.length; i < l; i ++) {\r\n      var hex = Number(str.charCodeAt(i)).toString(16);\r\n      arr.push(hex);\r\n    }\r\n    if(length != 0){\r\n    for (var i = arr.length; i < length; i ++) {\r\n        var hex = \"00\";\r\n        arr.push(hex);\r\n        }\r\n    }\r\n    return \"0x\" + arr.join('');\r\n}\r\n\r\n//convert hex to ascii\r\nexport function hex2a(hexx) {\r\n    var hex = hexx.toString();//force conversion\r\n    var str = '';\r\n    for (var i = 0; (i < hex.length && hex.substr(i, 2) !== '00'); i += 2)\r\n        str += String.fromCharCode(parseInt(hex.substr(i, 2), 16));\r\n    return str;\r\n}\r\n\r\nexport function Time2a(timestamp){\r\n    var s = new Date(timestamp*1000).toLocaleDateString(\"en-GB\");\r\n    return s;\r\n}\r\n\r\nexport function Time2HMS(timestamp){\r\n    var date = new Date(timestamp*1000);\r\n    // Hours part from the timestamp\r\n    var hours = date.getHours();\r\n    // Minutes part from the timestamp\r\n    var minutes = \"0\" + date.getMinutes();\r\n    // Seconds part from the timestamp\r\n    var seconds = \"0\" + date.getSeconds();\r\n    \r\n    // Will display time in 10:30:23 format\r\n    var formattedTime = hours + ':' + minutes.substr(-2) + ':' + seconds.substr(-2);\r\n    return formattedTime;\r\n}\r\n\r\n//function used to get the type of a post\r\nexport function TextType(content){\r\n    var type = \"Text\"\r\n    if(content.includes(\"base64\") && content.includes(\"img\")){\r\n        type = \"Image\";\r\n    }\r\n    return type;\r\n}","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport Swal from 'sweetalert2'\r\n\r\nimport {a2hex, hex2a, Time2a, aTo32bytehex, Time2HMS, TextType} from \"./parser\"\r\n\r\nconst TronWeb = require('tronweb')\r\nvar tronWeb;\r\n\r\n//connecting tronweb to the local docker node\r\nconst tronWebDefault = new TronWeb(\r\n    \"https://api.shasta.trongrid.io\",\r\n    \"https://api.shasta.trongrid.io\",\r\n    \"https://api.shasta.trongrid.io\",\r\n    'da146374a75310b9666e834ee4ad0866d6f4035967bfc76217c5a495fff9f0d0', //default testnet pkey\r\n)\r\n\r\n//address of the contract\r\n// const contractAddress = \"TGX6LGnhFgSUyG4oR7iU4bVTWUnMY9B7mP\"; MAINNET\r\nconst contractAddress = \"TEQebZr8wuhyYMLXCdWi6LQA7z2gN1fEfY\" //Shasta\r\n//const contractAddress = \"TH4TJ961DbZ6fuJNf3gHwNgfwNcRxxYE6a\"; // Quickstart\r\n\r\n\r\nfunction dynamicTronlink(){\r\n    var tron = tronWebDefault\r\n\r\n    if (!!window.tronWeb){\r\n        tron = window.tronWeb;\r\n    }\r\n\r\n    return tron;\r\n}\r\n\r\nexport async function createNewPost(title, content, tags) {\r\n\r\n    //notify the user that the post has been submitted\r\n    Swal({title:'Post Transaction Submitted',\r\n            type: 'info'\r\n        });\r\n\r\n    //load the contract \r\n    const contract = await window.tronWeb.contract().at(contractAddress);\r\n\r\n    //convert the data to an appropriate format for the blockchain to handle\r\n    let byteTitle = a2hex(title);\r\n    let byteContent = a2hex(content);\r\n    let byteTags = a2hex(tags);\r\n\r\n    //submit the data to the blockchain\r\n    contract.CreatePost(byteTitle, byteContent, byteTags).send({\r\n        shouldPollResponse:true,\r\n        callValue:0\r\n\r\n    }).then(res => Swal({\r\n        title:'Post Created Successfully',\r\n        type: 'success'\r\n\r\n    })).catch(err => Swal(\r\n        {\r\n             title:'Post Creation Failed',\r\n             type: 'error'\r\n        }\r\n    ));\r\n\r\n}\r\n\r\n//get data from contract events and convert it into a readable/useable state\r\nexport async function getPosts() {\r\n    tronWeb = dynamicTronlink()\r\n    //load the contract \r\n    const events = await tronWeb.getEventResult(contractAddress, 0, \"PostContent\", 0,  200, 1);\r\n\r\n    var posts = []\r\n    var TagList = []\r\n    for(var i=0; i<events.length; i++){\r\n\r\n        let address = events[i]['result']['author'];\r\n        let tronaddress = address.substring(2, address.length);\r\n        tronaddress = \"41\" + tronaddress;\r\n        tronaddress = tronWeb.address.fromHex(tronaddress)\r\n\r\n        //format data so it can be used and stored better\r\n        var post = {\r\n            title: hex2a(events[i]['result']['title']),\r\n            timestamp: Time2a(events[i]['result']['postTimestamp']),\r\n            tags: hex2a(events[i]['result']['tags']),\r\n            postid: events[i]['result']['id'],\r\n            author: address,\r\n            tronaddress: tronaddress,\r\n            content: hex2a(events[i]['result']['text']),\r\n            hms: Time2HMS(events[i]['result']['postTimestamp']),\r\n            type: TextType(hex2a(events[i]['result']['text']))\r\n          }\r\n          TagList = TagList.concat(post['tags']);\r\n\r\n        posts = posts.concat(post);\r\n    }\r\n\r\n    localStorage.setItem(\"Posts\", JSON.stringify(posts));\r\n    localStorage.setItem(\"TagList\", JSON.stringify(TagList));\r\n\r\n    return posts;\r\n}\r\n\r\nexport async function createNewComment(commentText, postid,  parentComment) {\r\n\r\n    //notify the user that the comment has been submitted\r\n    Swal({title:'Comment Transaction Submitted',\r\n            type: 'info'\r\n        });\r\n\r\n    //load the contract \r\n    const contract = await window.tronWeb.contract().at(contractAddress);\r\n\r\n    //convert the data to an appropriate format for the blockchain to handle\r\n    //let byteTitle = a2hex(title);\r\n    let bytecommentText = a2hex(commentText);\r\n    let id = \"0x\" + Number(postid).toString(16);\r\n\r\n    //submit the data to the blockchain\r\n    contract.PostComment(bytecommentText, id, \"0x00\").send({\r\n        shouldPollResponse:true,\r\n        callValue:0\r\n\r\n    }).then(res => Swal({\r\n        title:'Comment Posted Successfully',\r\n        type: 'success'\r\n\r\n    })).catch(err => Swal(\r\n        {\r\n             title:'Comment Post Failed',\r\n             type: 'error'\r\n        }\r\n    ));\r\n\r\n}\r\n\r\n//get data from contract events and convert it into a readable/useable state\r\nexport async function getComments() {\r\n    tronWeb = dynamicTronlink()\r\n\r\n    //load the contract \r\n    const events = await tronWeb.getEventResult(contractAddress, 0, \"CommentCreated\", 0,  200, 1);\r\n\r\n    var comments = []\r\n    for(var i=0; i<events.length; i++){\r\n\r\n        let address = events[i]['result']['commenter'];\r\n        let tronaddress = address.substring(2, address.length);\r\n        tronaddress = \"41\" + tronaddress;\r\n        tronaddress = tronWeb.address.fromHex(tronaddress)\r\n\r\n        var comment = {\r\n            parentComment: hex2a(events[i]['result']['parentComment']),\r\n            postid: events[i]['result']['postId'],\r\n            author: address,\r\n            tronaddress: tronaddress,\r\n            content: hex2a(events[i]['result']['comment']),\r\n            timestamp: Time2a(events[i]['result']['commentTimestamp']),\r\n            commentid: events[i]['result']['commentId'],\r\n            hms: Time2HMS(events[i]['result']['commentTimestamp'])\r\n          }\r\n\r\n          comments = comments.concat(comment);\r\n    }\r\n\r\n    localStorage.setItem(\"Comments\", JSON.stringify(comments));\r\n\r\n    return comments;\r\n}\r\n\r\n//get the vote counters from the blockchain\r\nexport async function getVoteCounters() {\r\n\r\n    tronWeb = dynamicTronlink()\r\n\r\n    const contract = await tronWeb.contract().at(contractAddress);\r\n\r\n    let posts = JSON.parse(localStorage.getItem(\"Posts\"));\r\n    let votes = [];\r\n\r\n    if (!posts){\r\n        posts = [];\r\n    }\r\n\r\n    for(var i=0; i<posts.length; i++){\r\n        let pid = posts[i]['postid'];\r\n        let id = \"0x\" + Number(pid).toString(16);\r\n\r\n        //grab vote data from the blockchain\r\n        let upvotecall = await contract.getUpVotes(id).call();\r\n        let up = tronWeb.toBigNumber(upvotecall['_hex']).toNumber();\r\n\r\n        let downvotecall = await contract.getDownVotes(id).call();\r\n        let down = tronWeb.toBigNumber(downvotecall['_hex']).toNumber();\r\n\r\n        let postVote = {\r\n            postid : pid,\r\n            upvotes : up,\r\n            downvotes: down,\r\n            total: (up-down)\r\n        }\r\n        votes = votes.concat(postVote);\r\n    } \r\n\r\n    localStorage.setItem(\"PostVotes\", JSON.stringify(votes));\r\n\r\n}\r\n\r\nexport async function VoteOnPost(postid, votetype) {\r\n\r\n\r\n\r\n    //load the contract \r\n    const contract = await window.tronWeb.contract().at(contractAddress);\r\n\r\n    //convert the postid into a useable form\r\n    let id = \"0x\" + Number(postid).toString(16);\r\n\r\n    if (votetype == 0){\r\n        //notify the user that the vote has been submitted\r\n        Swal({title:'Post Up Voted',\r\n        type: 'info'\r\n        });\r\n        //submit the data to the blockchain\r\n        contract.UpvotePost(postid).send({\r\n            shouldPollResponse:true,\r\n            callValue:0\r\n\r\n        }).then(res => Swal({\r\n            title:'Up Voted Successfully',\r\n            type: 'success'\r\n\r\n        })).catch(err => Swal(\r\n            {\r\n                title:'Up Vote Failed',\r\n                type: 'error'\r\n            }\r\n        ));\r\n    }else if (votetype == 1){\r\n\r\n        //notify the user that the vote has been submitted\r\n        Swal({title:'Post Down Voted',\r\n        type: 'info'\r\n        });\r\n\r\n        //submit the data to the blockchain\r\n        contract.DownvotePost(postid).send({\r\n            shouldPollResponse:true,\r\n            callValue:0\r\n\r\n        }).then(res => Swal({\r\n            title:'Down Voted Successfully',\r\n            type: 'success'\r\n\r\n        })).catch(err => Swal(\r\n            {\r\n                title:'Down Vote Failed',\r\n                type: 'error'\r\n            }\r\n        ));\r\n    }\r\n\r\n}\r\n\r\n//// Comment Related Functions\r\n\r\n//get the vote counters from the blockchain\r\nexport async function getCommentVoteCounters() {\r\n    tronWeb = dynamicTronlink()\r\n    const contract = await tronWeb.contract().at(contractAddress);\r\n\r\n    let comments = JSON.parse(localStorage.getItem(\"Comments\"));\r\n    let CommentVotes = [];\r\n\r\n    if (!comments){\r\n        comments = [];\r\n    }\r\n\r\n    for(var i=0; i<comments.length; i++){\r\n        let pid = comments[i]['postid'];\r\n        let cid = comments[i]['commentid'];\r\n\r\n        let id = \"0x\" + Number(pid).toString(16);\r\n        let comid = \"0x\" + Number(cid).toString(16);\r\n\r\n        //grab vote data from the blockchain\r\n        let upvotecall = await contract.getCommentUpVotes(id, comid).call();\r\n        let up = tronWeb.toBigNumber(upvotecall['_hex']).toNumber();\r\n\r\n        let downvotecall = await contract.getCommentDownVotes(id, comid).call();\r\n        let down = tronWeb.toBigNumber(downvotecall['_hex']).toNumber();\r\n\r\n        let commentVote = {\r\n            postid : pid,\r\n            commentid: cid,\r\n            upvotes : up,\r\n            downvotes: down,\r\n            total: (up-down)\r\n        }\r\n        CommentVotes = CommentVotes.concat(commentVote);\r\n    } \r\n\r\n    localStorage.setItem(\"CommentVotes\", JSON.stringify(CommentVotes));\r\n\r\n}\r\n\r\nexport async function VoteOnComment(postid, commentid, votetype) {\r\n\r\n    //load the contract \r\n    const contract = await window.tronWeb.contract().at(contractAddress);\r\n\r\n    //convert the postid into a useable form\r\n    let id = \"0x\" + Number(postid).toString(16);\r\n    let cid = \"0x\" + Number(commentid).toString(16);\r\n\r\n    if (votetype == 0){\r\n        //notify the user that the vote has been submitted\r\n        Swal({title:'Comment Up Voted',\r\n        type: 'info'\r\n        });\r\n        //submit the data to the blockchain\r\n        contract.UpvoteComment(postid, cid).send({\r\n            shouldPollResponse:true,\r\n            callValue:0\r\n\r\n        }).then(res => Swal({\r\n            title:'Up Voted Comment Successfully',\r\n            type: 'success'\r\n\r\n        })).catch(err => Swal(\r\n            {\r\n                title:'Comment Vote Failed',\r\n                type: 'error'\r\n            }\r\n        ));\r\n    }else if (votetype == 1){\r\n\r\n        //notify the user that the vote has been submitted\r\n        Swal({title:'Comment Down Voted',\r\n        type: 'info'\r\n        });\r\n\r\n        //submit the data to the blockchain\r\n        contract.DownvoteComment(postid, cid).send({\r\n            shouldPollResponse:true,\r\n            callValue:0\r\n\r\n        }).then(res => Swal({\r\n            title:'Comment Down Voted Successfully',\r\n            type: 'success'\r\n\r\n        })).catch(err => Swal(\r\n            {\r\n                title:'Comment Vote Failed',\r\n                type: 'error'\r\n            }\r\n        ));\r\n    }\r\n\r\n}\r\n\r\n// DEPOSIT, DONATION and WITHDRAW SYSTEM\r\nexport async function DepositTrx(trxAmount) {\r\n\r\n    //load the contract \r\n    const contract = await window.tronWeb.contract().at(contractAddress);\r\n\r\n    //convert tron amount into a sun value as sun is used as the call value\r\n    let sunAmount = Number(trxAmount * 1000000) // 1 trx is 1 million sun, call value is in sun.\r\n\r\n    //notify the user that the deposit has been attempted\r\n    Swal({title:'transaction to deposit ' + sunAmount.toString() + \"Sun (\" + trxAmount.toString() + \" trx) has been sent\",\r\n    type: 'info'\r\n    });\r\n\r\n    //submit the data to the blockchain\r\n    contract.deposit().send({\r\n        shouldPollResponse:true,\r\n        callValue: sunAmount\r\n\r\n    }).then(res => Swal({\r\n        title:'Deposit Made Successfully',\r\n        type: 'success'\r\n\r\n    })).catch(err => Swal(\r\n        {\r\n            title:'Deposit Failed',\r\n            type: 'error'\r\n        }\r\n    ));\r\n}\r\n\r\nexport async function withdrawTrx(takeAll, trxAmount) {\r\n\r\n    //load the contract \r\n    const contract = await window.tronWeb.contract().at(contractAddress);\r\n\r\n    //convert the postid into a useable form\r\n    let sunAmount = Number(trxAmount * 1000000) // 1 trx is 1 million sun, call value is in sun.\r\n    let sunHexValue = \"0x\" + Number(sunAmount).toString(16);\r\n\r\n    //notify the user that the deposit has been attempted\r\n    if(takeAll == true){\r\n\r\n        Swal({title:'transaction to withdraw Current trx balance has been sent',\r\n        type: 'info'\r\n        });\r\n\r\n    }else {\r\n\r\n        Swal({title:'transaction to withdraw ' + sunAmount.toString() + \"Sun (\" + trxAmount.toString() + \" trx) has been sent\",\r\n        type: 'info'\r\n        });\r\n\r\n    }\r\n\r\n    //submit the data to the blockchain\r\n    contract.withdraw(tronWeb.toHex(takeAll), sunHexValue).send({\r\n        shouldPollResponse:true,\r\n        callValue: 0\r\n\r\n    }).then(res => Swal({\r\n        title:'Withdrawal Successful',\r\n        type: 'success'\r\n\r\n    })).catch(err => Swal(\r\n        {\r\n            title:'Withdrawal Failed',\r\n            type: 'error'\r\n        }\r\n    ));\r\n}\r\n\r\nexport async function DonateTrx(postid, trxAmount) {\r\n\r\n    //load the contract \r\n    const contract = await window.tronWeb.contract().at(contractAddress);\r\n\r\n    //convert the postid into a useable form\r\n    let sunAmount = Number(trxAmount * 1000000) // 1 trx is 1 million sun, call value is in sun.\r\n    let sunHexValue = \"0x\" + Number(sunAmount).toString(16);\r\n    let id = \"0x\" + Number(postid).toString(16);\r\n\r\n\r\n    Swal({title:'Transaction to Donate ' + trxAmount.toString() + \"trx from your contract balance sent\",\r\n    type: 'info'\r\n    });\r\n\r\n\r\n    //submit the data to the blockchain\r\n    contract.makeDonation(id, sunHexValue).send({\r\n        shouldPollResponse:true,\r\n        callValue: 0\r\n\r\n    }).then(res => Swal({\r\n        title:'Donation Successful',\r\n        type: 'success'\r\n\r\n    })).catch(err => Swal(\r\n        {\r\n            title:'Donation Failed',\r\n            type: 'error'\r\n        }\r\n    ));\r\n}\r\n\r\n//get the vote counters from the blockchain\r\nexport async function getDonations() {\r\n    tronWeb = dynamicTronlink()\r\n    const contract = await tronWeb.contract().at(contractAddress);\r\n\r\n    let posts = JSON.parse(localStorage.getItem(\"Posts\"));\r\n    let Donations = [];\r\n\r\n    if (!posts){\r\n        posts = [];\r\n    }\r\n\r\n    for(var i=0; i<posts.length; i++){\r\n        let pid = posts[i]['postid'];\r\n        let id = \"0x\" + Number(pid).toString(16);\r\n\r\n        //grab vote data from the blockchain\r\n        let ContractPostDonation = await contract.getPostDonations(id).call();\r\n        let Sun = tronWeb.toBigNumber(ContractPostDonation['_hex']).toNumber();\r\n\r\n        let Donation = {\r\n            postid : pid,\r\n            SunDonations : Sun,\r\n            TrxDonation: (Sun/1000000)\r\n        }\r\n\r\n        Donations = Donations.concat(Donation);\r\n    } \r\n\r\n    localStorage.setItem(\"Donations\", JSON.stringify(Donations));\r\n\r\n}\r\n\r\n//USERNAME SYSTEM\r\n\r\nexport async function ChangeUsername(UsernameString) {\r\n\r\n    //load the contract \r\n    const contract = await window.tronWeb.contract().at(contractAddress);\r\n\r\n    //convert tron amount into a sun value as sun is used as the call value\r\n    let user = aTo32bytehex(UsernameString)\r\n\r\n    //notify the user that the deposit has been attempted\r\n    Swal({title:'Changing Username to : ' + UsernameString,\r\n    type: 'info'\r\n    });\r\n\r\n    //submit the data to the blockchain\r\n    contract.SetUsername(user).send({\r\n        shouldPollResponse:true,\r\n        callValue: 0\r\n\r\n    }).then(res => Swal({\r\n        title:'Username Changed Successfully',\r\n        type: 'success'\r\n\r\n    })).catch(err => Swal(\r\n        {\r\n            title:'Username Change Failed',\r\n            type: 'error'\r\n        }\r\n    ));\r\n}\r\n\r\n//get the current users data\r\nexport async function getUserData() {\r\n    tronWeb = dynamicTronlink()\r\n    const contract = await tronWeb.contract().at(contractAddress);\r\n\r\n    let user = JSON.parse(localStorage.getItem(\"User\"));\r\n\r\n    if (!user){\r\n        user = [];\r\n    }\r\n\r\n    //grab the sender address from the blockchain\r\n    let senderAddress = await contract.getSenderAddress().call();\r\n    let hexAdd = senderAddress;\r\n    let add = tronWeb.address.fromHex(hexAdd);\r\n\r\n    let ContractBalance = await contract.getBalance(hexAdd).call();\r\n    let balance = tronWeb.toBigNumber(ContractBalance['_hex']).toNumber();\r\n    \r\n    let ContractUsername = await contract.getUsername(hexAdd).call();\r\n    let username = hex2a(ContractUsername);\r\n\r\n    user = {\r\n        TronAddress : add,\r\n        HexAddress : \"0x\" + hexAdd,\r\n        SunBalance : balance,\r\n        UserName : username\r\n    }\r\n\r\n    localStorage.setItem(\"User\", JSON.stringify(user));\r\n}\r\n\r\n\r\nexport async function getUsers() {\r\n    tronWeb = dynamicTronlink()\r\n    const contract = await tronWeb.contract().at(contractAddress);\r\n    let posts = JSON.parse(localStorage.getItem(\"Posts\"));\r\n    let comments = JSON.parse(localStorage.getItem(\"Comments\"));\r\n\r\n    let unique = []\r\n\r\n    if(posts){\r\n        for(var i = 0; i<posts.length; i++){\r\n            var author = posts[i]['author']\r\n            if(unique.includes(author ) == false) {\r\n                unique = unique.concat(author)\r\n            }\r\n        }\r\n    }\r\n\r\n    if(comments){\r\n\r\n        for(var i = 0; i<comments.length; i++){\r\n            var author = comments[i]['author']\r\n            if(unique.includes(author ) == false) {\r\n                unique = unique.concat(author)\r\n            }\r\n        }\r\n    }\r\n\r\n    var UserNames = []\r\n\r\n    let NoUsername = await contract.getUsername(\"0000000000000000000000000000000000000000\").call();\r\n    let nousernameascii = hex2a(NoUsername);\r\n\r\n    for (var i = 0; i<unique.length; i++){\r\n        var address = unique[i].substring(2, unique[i].length)\r\n        let ContractUsername = await contract.getUsername(address).call();\r\n        let username = hex2a(ContractUsername);\r\n\r\n        if(username == nousernameascii){\r\n            username = \"anonymous\"\r\n        }\r\n        \r\n        \r\n        var user = {\r\n            HexAddress : unique[i],\r\n            UserName : username\r\n        }\r\n\r\n        UserNames = UserNames.concat(user)\r\n    }\r\n    localStorage.setItem(\"KnownUsers\", JSON.stringify(UserNames));\r\n}","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport {VoteOnPost} from \"../utils/tronweb\";\r\n\r\nclass PostVote extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.handleUpvote = this.handleUpvote.bind(this);\r\n        this.handleDownvote = this.handleDownvote.bind(this);\r\n      }\r\n    \r\n      handleUpvote(event) {\r\n        VoteOnPost(this.props.postid, 0);\r\n        event.preventDefault();\r\n      }\r\n\r\n      handleDownvote(event) {\r\n        VoteOnPost(this.props.postid, 1);\r\n        event.preventDefault();\r\n      }\r\n\r\n  render() {\r\n    //grab the vote count for the given post\r\n    let upVoteCount = 0;\r\n    let downVoteCount = 0;\r\n    let totalVote = 0;\r\n    let votes = JSON.parse(localStorage.getItem(\"PostVotes\"));\r\n    if(votes) {\r\n      for(var i=0; i<votes.length; i++){\r\n        if(votes[i]['postid'] == this.props.postid){\r\n          upVoteCount = votes[i]['upvotes'] \r\n          downVoteCount = votes[i]['downvotes'] \r\n          totalVote = votes[i]['total'] \r\n        }\r\n      }\r\n    }\r\n\r\n    let upValue = \"⟰\" + upVoteCount.toString()\r\n    let downValue = \"⟱\" + downVoteCount.toString()\r\n\r\n    return (\r\n        <span>\r\n            <button type=\"button\" class=\"btn btn-outline-dark\" onClick={this.handleUpvote}>{upValue}</button>\r\n            <button type=\"button\" class=\"btn btn-outline-dark\" onClick={this.handleDownvote}>{downValue}</button>\r\n        </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostVote;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport PostVote from \"./PostVote\";\r\n\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Divider from '@material-ui/core/Divider';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nclass PostItem extends Component {\r\n  render() {\r\n\r\n    //grab the vote count for the given post\r\n    let upVoteCount = 0;\r\n    let downVoteCount = 0;\r\n    if(this.props.votes) {\r\n      for(var i=0; i<this.props.votes.length; i++){\r\n        if(this.props.votes[i]['postid'] == this.props.post.postid){\r\n          upVoteCount = this.props.votes[i]['upvotes'] \r\n          downVoteCount = this.props.votes[i]['downvotes'] \r\n        }\r\n      }\r\n    }\r\n\r\n    let Users = JSON.parse(localStorage.getItem(\"KnownUsers\"));\r\n    let username = \"anonymous\"\r\n\r\n    for(var i=0; i<Users.length; i++){\r\n      if(Users[i]['HexAddress'] == this.props.post.author){\r\n        username = Users[i]['UserName'];\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"PostItem\">\r\n        <div class=\"container-fluid\">\r\n          <div class=\"row\">\r\n              <div class=\"col-md-2\">\r\n                <PostVote postid={this.props.post.postid} />\r\n              </div>\r\n              \r\n              <div class=\"col-md-8\">\r\n              <p></p>\r\n                <div className=\"title-area\">\r\n                    <span className=\"title\"><Link to={\"post=\" + this.props.post.postid}> {this.props.post.title + \" \"}</Link><span class=\"badge badge-dark\">{ this.props.post.type}</span></span>  \r\n                </div>\r\n\r\n                <div className=\"meta-area\">\r\n                <Divider variant=\"middle\" />\r\n\r\n                  <span className=\"time\">\r\n                    Submitted at {this.props.post.hms} on {this.props.post.timestamp} by\r\n                    <Tooltip title={\" \" +this.props.post.author+\" \"+this.props.post.tronaddress} leaveDelay={400} interactive={true}><strong> {username}</strong></Tooltip>\r\n                  </span>\r\n                  <Divider variant=\"middle\" />\r\n                </div>\r\n              </div>\r\n              \r\n          </div>\r\n        </div>\r\n        <p></p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostItem;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nclass DummyItem extends Component {\r\n\r\n  render() {\r\n      let type = \"Comment\";\r\n      if(this.props.isPost) {\r\n        type = \"Post\"\r\n      }\r\n    return (\r\n      <div className=\"DummyItem\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n              There are no {type}'s to display. Try refreshing the page to load events from the Tron Virtual Machine. If no events are shown, try pointing your tronlink to another event server as api.trongrid.io will only show events from the last ~6 hours.\r\n            </div>\r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DummyItem;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport PostItem from \"./PostItem\";\r\nimport DummyItem from \"./DummyItem\";\r\nclass Posts extends Component {\r\n\r\n  render() {\r\n    let postItems;\r\n    let posts = JSON.parse(localStorage.getItem(\"Posts\"))\r\n    let votes = JSON.parse(localStorage.getItem(\"PostVotes\"))\r\n    let filter = []\r\n    if(!posts){\r\n      posts = []\r\n    } \r\n    else {\r\n      if (this.props.filterword.length > 0){\r\n        for(var i=0; i<posts.length; i++){\r\n          if((posts[i]['content'].match(this.props.filterword) && this.props.content) \r\n          || (posts[i]['tags'].match(this.props.filterword) && this.props.tag) \r\n          || (posts[i]['title'].match(this.props.filterword && this.props.title))){\r\n            filter = filter.concat(posts[i])\r\n          }\r\n        }\r\n        posts = filter\r\n      }\r\n\r\n      if(posts.length > 0) {\r\n          postItems = posts.map(post => {\r\n              return (\r\n                  <PostItem key={post.title} post={post} votes={votes}/>\r\n              )\r\n          } );\r\n\r\n      } else {\r\n\r\n        postItems = <DummyItem isPost={true}/>\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"Postss\">\r\n\r\n              {postItems}\r\n\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Posts;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport {createNewComment} from \"../utils/tronweb\";\r\n\r\n//for the rich text editor:\r\nimport ReactQuill, { Quill, Mixin, Toolbar } from 'react-quill'; \r\nimport 'react-quill/dist/quill.snow.css'; // ES6\r\n\r\nclass CommentBox extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      commentText: ''\r\n\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(value) {\r\n    this.setState({commentText: value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    createNewComment(this.state.commentText, this.props.postid,  0);\r\n    event.preventDefault();\r\n  }\r\n\r\n  modules = {\r\n    toolbar: [\r\n      [{ 'header': [1, 2, false] }],\r\n      ['bold', 'italic', 'underline','strike', 'blockquote'],\r\n      [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],\r\n      ['link', 'image'],\r\n      ['clean']\r\n    ],\r\n  }\r\n\r\n formats = [\r\n    'header',\r\n    'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n    'list', 'bullet', 'indent',\r\n    'link', 'image'\r\n  ]\r\n\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"CommentBox\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n            <form onSubmit={this.handleSubmit}>\r\n\r\n                <label> </label>\r\n                <ReactQuill theme=\"snow\"\r\n                  modules={this.modules}\r\n                  formats={this.formats}\r\n                  value={this.state.commentText} \r\n                  onChange={this.handleChange}>\r\n                </ReactQuill>\r\n                <p> </p>\r\n                \r\n                <input type=\"submit\" class=\"btn btn-outline-dark\" value=\"Submit\" />\r\n            </form>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n  export default CommentBox;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport {VoteOnComment} from \"../utils/tronweb\";\r\n\r\nclass CommentVote extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n    \r\n        this.handleUpvote = this.handleUpvote.bind(this);\r\n        this.handleDownvote = this.handleDownvote.bind(this);\r\n      }\r\n    \r\n      handleUpvote(event) {\r\n        VoteOnComment(this.props.postid, this.props.commentid, 0);\r\n        event.preventDefault();\r\n      }\r\n\r\n      handleDownvote(event) {\r\n        VoteOnComment(this.props.postid, this.props.commentid, 1);\r\n        event.preventDefault();\r\n      }\r\n\r\n  render() {\r\n    //grab the vote count for the given post\r\n    let upVoteCount = 0;\r\n    let downVoteCount = 0;\r\n    let totalVote = 0;\r\n    let votes = JSON.parse(localStorage.getItem(\"CommentVotes\"));\r\n    if(votes) {\r\n      for(var i=0; i<votes.length; i++){\r\n        if(votes[i]['postid'] == this.props.postid && votes[i]['commentid'] == this.props.commentid){\r\n          upVoteCount = votes[i]['upvotes'] \r\n          downVoteCount = votes[i]['downvotes'] \r\n          totalVote = votes[i]['total'] \r\n        }\r\n      }\r\n    }\r\n\r\n    let upValue = \"⟰\" + upVoteCount.toString()\r\n    let downValue = \"⟱\" + downVoteCount.toString()\r\n\r\n    return (\r\n        <span>\r\n            <button type=\"button\" class=\"btn btn-outline-dark btn-sm\" onClick={this.handleUpvote}>{upValue}</button>\r\n            <button type=\"button\" class=\"btn btn-outline-dark btn-sm\" onClick={this.handleDownvote}>{downValue}</button>\r\n        </span>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CommentVote;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport Divider from '@material-ui/core/Divider';\r\n\r\nimport CommentVote from \"./CommentVote\";\r\n\r\nclass CommentItem extends Component {\r\n  render() {\r\n    let Users = JSON.parse(localStorage.getItem(\"KnownUsers\"));\r\n    let username = \"anonymous\"\r\n\r\n    for(var i=0; i<Users.length; i++){\r\n      if(Users[i]['HexAddress'] == this.props.comment.author){\r\n        username = Users[i]['UserName'];\r\n      }\r\n    }\r\n    return (\r\n      <div className=\"CommentItem\">\r\n        <div class=\"container-fluid\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-2\">\r\n              <CommentVote postid={this.props.comment.postid} commentid={this.props.comment.commentid} />\r\n            </div>\r\n            <div class=\"col-md-8\">\r\n              <div className=\"content\">\r\n                <div className=\"title-area\">\r\n                  <div dangerouslySetInnerHTML={{__html: this.props.comment.content}} />\r\n                  <Divider variant=\"middle\" />\r\n                </div>\r\n                <div className=\"meta-area\">\r\n                  <span className=\"time\">\r\n                    Submitted {this.props.comment.hms} {this.props.comment.timestamp} by\r\n                    <Tooltip title={\" \"+ this.props.comment.author + \" \" + this.props.comment.tronaddress} leaveDelay={400} interactive={true}><strong> {username}</strong></Tooltip>\r\n                  </span>\r\n                  <Divider variant=\"middle\" />\r\n                </div>\r\n              </div>\r\n            </div>\r\n            \r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CommentItem;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport CommentItem from \"./CommentItem\";\r\nimport DummyItem from \"./DummyItem\";\r\n\r\nclass CommentsList extends Component {\r\n\r\n  render() {\r\n    let commentItems;\r\n    \r\n    let comments = JSON.parse(localStorage.getItem(\"Comments\"))\r\n    let filteredComments = []\r\n    for(var i=0; i<comments.length; i++){\r\n        if(comments[i]['postid'] === this.props.postid){\r\n            filteredComments = filteredComments.concat(comments[i])\r\n        }\r\n      } \r\n\r\n    if(filteredComments.length > 0) {\r\n        commentItems = filteredComments.map(comment => {\r\n            return (\r\n                <CommentItem key={comment.commentid} comment={comment}/>\r\n            )\r\n        } );\r\n    } else {\r\n      commentItems = <DummyItem isPost={false}/>\r\n    }\r\n    \r\n    return (\r\n      <div className=\"CommentsList\">\r\n        <div class=\"container\">\r\n\r\n              {commentItems}\r\n              \r\n          </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default CommentsList;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport {DonateTrx} from \"../utils/tronweb\";\r\n\r\nclass Donate extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      TrxValue: ''\r\n    };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  handleChange(event) {\r\n    this.setState({TrxValue: event.target.value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    DonateTrx(this.props.postid, this.state.TrxValue);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    let userData = JSON.parse(localStorage.getItem(\"User\"))\r\n    return (\r\n    <div className=\"Donate\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div>\r\n                    <input type=\"number\" value={this.state.TrxValue} onChange={this.handleChange} /> Trx\r\n                </div>\r\n                <p></p>\r\n\r\n                <p><strong> You currently have a contract balance of {Number(userData['SunBalance'])/1000000}TRX</strong></p>\r\n\r\n                <input type=\"submit\" class=\"btn btn-outline-dark\" value=\"Donate\" />\r\n\r\n                              <p></p>\r\n                <strong>Post Has Earned: {this.props.donation['TrxDonation']}Trx </strong> \r\n              <p></p>\r\n            </form>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n  export default Donate;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport CommentBox from \"./CommentBox\";\r\nimport CommentsList from \"./CommentsList\";\r\nimport PostVote from \"./PostVote\";\r\nimport Donate from \"./Donate\";\r\n\r\n\r\nimport Divider from '@material-ui/core/Divider';\r\nimport Tooltip from '@material-ui/core/Tooltip';\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass PostPage extends Component {\r\n\r\n  render() {\r\n    var postid = this.props.postid;\r\n    let post;\r\n    let donation;\r\n    if(this.props.postid) {\r\n      let posts = JSON.parse(localStorage.getItem(\"Posts\"));\r\n      let donations = JSON.parse(localStorage.getItem(\"Donations\")); \r\n      for(var i=0; i<posts.length; i++){\r\n        if(posts[i]['postid'] === this.props.postid){\r\n          post = posts[i];\r\n          break;\r\n        }\r\n      }\r\n\r\n      for(var i=0; i<donations.length; i++){\r\n        if(donations[i]['postid'] === this.props.postid){\r\n          donation = donations[i];\r\n          break;\r\n        }\r\n      } \r\n\r\n    }\r\n    if(!post) {\r\n      post = {\r\n        title: \"404 Not Found\",\r\n        author: \"0x0\",\r\n        timestamp: \"ERROR\",\r\n        content: \"Post does not exist\"\r\n      }\r\n      postid = -1;\r\n    }\r\n\r\n    let Users = JSON.parse(localStorage.getItem(\"KnownUsers\"));\r\n    let username = \"anonymous\"\r\n\r\n    for(var i=0; i<Users.length; i++){\r\n      if(Users[i]['HexAddress'] == post['author']){\r\n        username = Users[i]['UserName'];\r\n      }\r\n    }\r\n\r\n    return (\r\n      <div className=\"PostPage\">\r\n\r\n\r\n        <ExpansionPanel expanded={true}>\r\n            <ExpansionPanelSummary >\r\n              <Typography ><h1>{post['title']}</h1></Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n            <div class=\"container\">\r\n              <div class=\"row\">\r\n\r\n                  <p></p>\r\n                  <div class=\"container\">\r\n                  <p class=\"lead\" align=\"justify\">\r\n                    <div dangerouslySetInnerHTML={{__html: post['content']}} />\r\n                    </p>\r\n                  </div>\r\n                  <div>\r\n\r\n                  <Divider variant=\"middle\" />\r\n\r\n                  Posted on {post['timestamp']} at {post['hms']} by\r\n                  <Tooltip title={\" \" +post['author']+\" \"+post['tronaddress']} leaveDelay={400} interactive={true}><strong> {username}</strong></Tooltip>\r\n\r\n                  <Divider variant=\"middle\" />\r\n\r\n                  </div>\r\n\r\n              </div>\r\n            </div>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n\r\n          <ExpansionPanel defaultExpanded={true}>\r\n            <ExpansionPanelSummary >\r\n              <Typography ><h3>Vote</h3></Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n              <PostVote postid={postid} />\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n\r\n          <ExpansionPanel defaultExpanded={true}>\r\n            <ExpansionPanelSummary >\r\n              <Typography> <h3>Donate</h3> </Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n                <Donate postid={postid} donation={donation}/>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n\r\n          <ExpansionPanel defaultExpanded={true}>\r\n            <ExpansionPanelSummary >\r\n              <Typography ><h3>Leave Comment</h3></Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n              <CommentBox postid={postid}/>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n\r\n          <ExpansionPanel defaultExpanded={true}>\r\n            <ExpansionPanelSummary >\r\n              <Typography ><h3>Comment Section</h3></Typography>\r\n            </ExpansionPanelSummary>\r\n            <ExpansionPanelDetails>\r\n              <CommentsList postid={postid}/>\r\n            </ExpansionPanelDetails>\r\n          </ExpansionPanel>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default PostPage;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport {createNewPost} from \"../utils/tronweb\";\r\n\r\n//for the rich text editor:\r\nimport ReactQuill, { Quill, Mixin, Toolbar } from 'react-quill'; \r\nimport 'react-quill/dist/quill.snow.css'; // ES6\r\n\r\n\r\nclass CreatePostForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      title: '',\r\n      tag: '',\r\n      content: ''\r\n    };\r\n    \r\n\r\n\r\n    this.handleTitleChange = this.handleTitleChange.bind(this);\r\n    this.handleTagChange = this.handleTagChange.bind(this);\r\n    this.handleContentChange = this.handleContentChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  modules = {\r\n    toolbar: [\r\n      [{ 'header': [1, 2, false] }],\r\n      ['bold', 'italic', 'underline','strike', 'blockquote'],\r\n      [{'list': 'ordered'}, {'list': 'bullet'}, {'indent': '-1'}, {'indent': '+1'}],\r\n      ['link', 'image'],\r\n      ['clean']\r\n    ],\r\n  }\r\n\r\n formats = [\r\n    'header',\r\n    'bold', 'italic', 'underline', 'strike', 'blockquote',\r\n    'list', 'bullet', 'indent',\r\n    'link', 'image'\r\n  ]\r\n  \r\n\r\n  handleTitleChange(event) {\r\n    this.setState({title: event.target.value});\r\n  }\r\n\r\n  handleTagChange(event) {\r\n    this.setState({tag: event.target.value});\r\n  }\r\n\r\n  handleContentChange(value) {\r\n    this.setState({content: value});\r\n  }\r\n\r\n  handleSubmit(event) {\r\n    createNewPost(this.state.title, this.state.content, this.state.tag);\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    \r\n    return (\r\n      <div className=\"CreatePostForm\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n              <form onSubmit={this.handleSubmit}>\r\n              <h3>Create New Post</h3>\r\n                <label> Title: </label>\r\n                  <div>\r\n                    <input type=\"text\" maxLength={120} value={this.state.title} onChange={this.handleTitleChange} />\r\n                  </div>\r\n                <p> </p>\r\n\r\n                <label> Content: </label>\r\n                <ReactQuill theme=\"snow\"\r\n                  modules={this.modules}\r\n                  formats={this.formats}\r\n                  value={this.state.content} \r\n                  onChange={this.handleContentChange}>\r\n                </ReactQuill>\r\n\r\n\r\n                <p> </p>\r\n                \r\n                <label> Tags: </label>\r\n                  <div>\r\n                    <input type=\"text\" maxLength={50} value={this.state.tag} onChange={this.handleTagChange} />\r\n                  </div>\r\n                <p> </p>\r\n\r\n                <input type=\"submit\" class=\"btn btn-outline-dark\" value=\"Submit\" />\r\n              </form>\r\n            </div>\r\n          </div>\r\n          <div class=\"container\">\r\n            <div>\r\n              <p></p>\r\n              <h3>Preview </h3>\r\n              <p></p>\r\n            </div>\r\n            \r\n            \r\n            <div dangerouslySetInnerHTML={{__html: this.state.content}} />\r\n            </div>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n  export default CreatePostForm;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\n\r\nclass About extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n    <div className=\"About\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n            <form onSubmit={this.handleSubmit}>\r\n                <div>\r\n\r\n                <p align=\"justify\">\r\n                <h4> NoFilter tron dApp (aka !Filter)</h4> \r\n                <p><strong> MainNet Deployed Address - TGX6LGnhFgSUyG4oR7iU4bVTWUnMY9B7mP</strong> </p>\r\n                <p><strong> Shasta Testnet Deployed Address - TEQebZr8wuhyYMLXCdWi6LQA7z2gN1fEfY</strong> </p>\r\n                <p><strong> NoFilter has been returned to shasta until trongrid stores all past events OR an event server can be successfully set up!</strong> </p>\r\n                <p><strong> Made for the Tron Accelerator Hackathon</strong> </p>\r\n                <p><strong> Creator - Harnick Khera (Hephyrius)</strong> </p>\r\n                </p>\r\n\r\n                <p align=\"justify\">\r\n                <h4>What is NoFilter</h4>\r\n                NoFilter is a dApp media platform. The platform allows users to share content with other users, akin to platforms such as medium or reddit. It leverages the TronVM event system as a means of storing content in an immutable fashion. The platform allows users to reward the content they like with donations (in trx). The dApp also makes use of Tron SmartContracts to keep track of statistics such as Votes and Donations. There is no fee model for this dApp, other than the Gas cost for functions. it is freely useable in it current form. \r\n                The dApp essentially uses tron nodes as a server, and tron as a database, whilst the frontend acts as the client. The is dApp allows the user to tap directly into a TVM fullhost/api of their choice (via tronLink settings). Due to the fact that no data is stored offchain it is near impossible to censor.\r\n                </p>\r\n\r\n                <p align=\"justify\">\r\n                <h4>Why is it needed</h4>\r\n                Being Censorship Resistant is a very important concept for the modern internet, which is under constant assault by government censorship and manipulation by shadowy organisations and private interests. Another area where this concept is important is in the realm of content policing, modern social platforms often alienate fringe communities with broad rules that can often push users to darker platforms. This is evident in many cases, with the recent tumblr blanket ban on female nuditity being once such case.  Another need for this dApp is the case of data harvesting. The dApp only records bare bone facts about a user to the blockchain and does not track users in any form. This is appealing in the post camebridge-analytica social domain.\r\n                </p>\r\n\r\n                </div>\r\n            </form>\r\n            </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n  export default About;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nclass SiteHeader extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"header\">\r\n            <nav class=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n                <a class=\"navbar-brand\"><Link to=\"/\">N!Filter [Shasta Test Net]</Link> </a>\r\n                <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span class=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div class=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n                    <ul class=\"navbar-nav\">\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\"> <Link to=\"/\">Home</Link> </a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\">  <Link to=\"/new-post\">Create New Post</Link> </a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\">  <Link to=\"/account\">Account</Link> </a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\">  <Link to=\"/about\">About</Link> </a>\r\n                        </li>\r\n                        <li class=\"nav-item\">\r\n                            <a class=\"nav-link\">  <Link to=\"/search\">Search</Link> </a>\r\n                        </li>\r\n                    </ul>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n        );\r\n     }\r\n}\r\n\r\nexport default SiteHeader;\r\n\r\n","\r\n//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\nimport React, { Component } from 'react';\r\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nclass SiteFooter extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <div className=\"header\">\r\n            <footer class=\"page-footer font-small blue\">\r\n                <div class=\"footer-copyright text-center py-3\">© NoFilter [Shasta Test Net] 2019\r\n                    <p><Link to=\"/\">Home</Link> | <Link to=\"/new-post\">Create New Post</Link> | <Link to=\"/about\">About</Link> | <Link to=\"/search\">Search</Link> | <Link to=\"/account\">Account</Link> </p>\r\n                </div>\r\n            </footer>\r\n        </div>\r\n        );\r\n     }\r\n}\r\n\r\nexport default SiteFooter;\r\n\r\n","\r\n//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\nimport React, { Component } from 'react';\r\nimport Posts from \"./Posts\";\r\n\r\nclass Search extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          search: ''\r\n        };\r\n    \r\n        this.handleSearchChange = this.handleSearchChange.bind(this);\r\n      }\r\n    \r\n      handleSearchChange(event) {\r\n        this.setState({search: event.target.value});\r\n      }\r\n    \r\n    \r\n      render() {\r\n        return (\r\n            <div id=\"container\" class=\"container\">\r\n                <div class=\"row text-black\">\r\n                    <div class=\"col-sm-10 offset-sm-1 text-center\">\r\n                        <h3 class=\"display-3\">Search Posts</h3>\r\n                            <div class=\"info-form\">\r\n                                <form>  \r\n                                    <div class=\"form-group\">\r\n                                        <input type=\"text\" value={this.state.search} onChange={this.handleSearchChange} />\r\n                                    </div>\r\n                                </form>\r\n                            </div>\r\n                        </div>\r\n                        <Posts filterword={this.state.search} content={true} tag={true} title={true} />\r\n                </div>\r\n            </div>\r\n        );\r\n      }\r\n    }\r\n\r\n\r\nexport default Search;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport { Tab, Tabs, TabList, TabPanel } from 'react-tabs';\r\nimport 'react-tabs/style/react-tabs.css';\r\nimport {DepositTrx, withdrawTrx, ChangeUsername} from \"../utils/tronweb\";\r\n\r\nclass Account extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n        DepositValue: 0,\r\n        Username: \"\"\r\n      };\r\n\r\n      this.handleDepositChange = this.handleDepositChange.bind(this);\r\n      this.handleDepositSubmit = this.handleDepositSubmit.bind(this);\r\n      this.handleWithdrawSubmit = this.handleWithdrawSubmit.bind(this);\r\n\r\n      this.handleUserChange = this.handleUserChange.bind(this);\r\n      this.handleUserSubmit = this.handleUserSubmit.bind(this);\r\n\r\n  }\r\n\r\n  handleDepositChange(event) {\r\n    this.setState({DepositValue: event.target.value});\r\n  }\r\n\r\n  handleDepositSubmit(event) {\r\n    DepositTrx(this.state.DepositValue);\r\n    this.state.DepositValue = 0;\r\n    event.preventDefault();\r\n  }\r\n\r\n  handleWithdrawSubmit(event) {\r\n    withdrawTrx(true, 0);\r\n    this.state.WithdrawValue = 0;\r\n    event.preventDefault();\r\n  }\r\n\r\n  handleUserChange(event) {\r\n    this.setState({Username: event.target.value});\r\n  }\r\n\r\n  handleUserSubmit(event) {\r\n    ChangeUsername(this.state.Username);\r\n    this.state.Username = \" \";\r\n    event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    let userData = JSON.parse(localStorage.getItem(\"User\"))\r\n\r\n    return (\r\n    <div className=\"Account\">\r\n        <div class=\"container\">\r\n\r\n            <h2>Account Settings and Information</h2>\r\n            <Tabs>\r\n                <TabList>\r\n                    <Tab>Current User Information</Tab>\r\n                    <Tab>Update Username</Tab>\r\n                    <Tab>Deposit Trx</Tab>\r\n                    <Tab>Withdraw Trx</Tab>\r\n                </TabList>\r\n\r\n            \r\n            <TabPanel>\r\n                <div className=\"Information\">.\r\n                    <h3>Current User Information</h3>\r\n                    <p></p>\r\n                        <strong>Username: </strong> {userData['UserName']}\r\n                    <p></p>\r\n                        <strong>Balance: </strong> {Number(userData['SunBalance'])/1000000} Trx\r\n                    <p></p>\r\n                        <strong>Address: </strong> {userData['TronAddress']}\r\n                    <p></p>\r\n                        <strong>Hex Address: </strong> {userData['HexAddress']}\r\n                    <p></p>\r\n\r\n                </div>\r\n            </TabPanel>\r\n\r\n            <TabPanel>\r\n                <div className=\"Usename\">\r\n                    <h3>Update Username</h3>\r\n\r\n                    <form onSubmit={this.handleUserSubmit}>\r\n                    \r\n                        <label> Username</label>\r\n\r\n                        <div>\r\n                            <input type=\"Text\" maxLength={12} value={this.state.Username} onChange={this.handleUserChange} />\r\n                        </div>\r\n\r\n                        <p></p>\r\n                            <input type=\"submit\" class=\"btn btn-outline-dark btn-sm\" value=\"Change\" />\r\n                        <p></p>\r\n\r\n                    </form>\r\n                </div>\r\n            </TabPanel>\r\n\r\n            <TabPanel>\r\n                <div className=\"Deposit\">\r\n                    <h3>Deposit Trx</h3>\r\n\r\n                    <form onSubmit={this.handleDepositSubmit}>\r\n                        <label> Deposit Value </label>\r\n\r\n                        <div>\r\n                            <input type=\"number\" value={this.state.DepositValue} onChange={this.handleDepositChange} />\r\n                        </div>\r\n\r\n                        <p></p>\r\n                            <input type=\"submit\" class=\"btn btn-outline-dark\" value=\"Deposit\" />\r\n                        <p></p>\r\n                    </form>\r\n\r\n                </div>\r\n            </TabPanel>\r\n\r\n            <TabPanel>\r\n                <div className=\"Withdraw\">\r\n                    <h3>Withdraw Trx</h3>\r\n\r\n                    <form onSubmit={this.handleWithdrawSubmit}>\r\n                        \r\n                        <p></p>\r\n                        <input type=\"submit\" class=\"btn btn-outline-dark\" value={ \"Withdrawal Your \" + (Number(userData['SunBalance'])/1000000).toString() + \" Trx\"} />\r\n                        <p></p>\r\n                    </form>\r\n                </div>\r\n            </TabPanel>\r\n\r\n            </Tabs>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n  export default Account;\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React, { Component } from 'react';\r\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\r\n\r\nimport Posts from \"./components/Posts\";\r\nimport PostPage from \"./components/PostPage\";\r\nimport CreatePostForm from \"./components/CreatePostForm\";\r\nimport About from \"./components/About\";\r\nimport SiteHeader from \"./components/SiteHeader\";\r\nimport SiteFooter from \"./components/SiteFooter\";\r\nimport Search from \"./components/Search\";\r\nimport Account from \"./components/Account\";\r\nimport 'jquery/dist/jquery.js'\r\nimport \"./bootstrap.css\";\r\nimport 'bootstrap/dist/js/bootstrap.js'\r\n\r\nimport {getPosts, getComments, getVoteCounters, getCommentVoteCounters, getUserData, getDonations, getUsers} from \"./utils/tronweb\";\r\n\r\nclass App extends Component {\r\n  \r\n  constructor () {\r\n    super();\r\n    this.state = [{\r\n      posts : [],\r\n      postData : getPosts(),\r\n      commentData: getComments()\r\n    }]\r\n    getVoteCounters()\r\n    getCommentVoteCounters()\r\n    getUserData()\r\n    getDonations()\r\n    getUsers()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Router>   \r\n      <div className=\"App\">\r\n        <div class=\"container\">\r\n          <SiteHeader />\r\n\r\n          <Route path=\"/new-post\" component={newpost} />\r\n\r\n          <Route path=\"/\" exact component={Home} />\r\n\r\n          <Route path=\"/about\" component={AboutP} />\r\n\r\n          <Route path=\"/post=:id\" component={PostP}/>\r\n\r\n          <Route path=\"/tag=:term\" component={TagP}/>\r\n\r\n          <Route path=\"/search\" component={SearchP}/>\r\n\r\n          <Route path = \"/account\" component ={AccountP} />\r\n\r\n          <SiteFooter />\r\n        </div>\r\n        \r\n      </div>\r\n      </Router>\r\n      \r\n    );\r\n  }\r\n}\r\n\r\nconst Home = () => <Posts filterword={\"\"}/>;\r\nconst newpost = () => <CreatePostForm /> ;\r\nconst PostP = ({ match }) => ( <PostPage postid={match.params.id} />);\r\nconst TagP = ({ match }) => ( <Posts filterword={match.params.term} content={false} tag={true} title={false} />);\r\nconst AboutP = ({ match }) => ( <About />);\r\nconst SearchP = ({ match }) => ( <Search />);\r\nconst AccountP = ({ match }) => ( <Account />);\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","//No Filter is a dApp created for the Tron Accelerator\r\n//The smart contract enables content creation\r\n//as well as metric tracking and other logic\r\n//When coupled with the frontend, it creates an experience similar to a \r\n//traditional blog style social website such as medium and reddit\r\n//Created By Harnick Khera (Github.com/Hephyrius)\r\n//Repository can be found at (Github.com/Hephyrius/Nofilter)\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}